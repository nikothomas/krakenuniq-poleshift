name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y zlib1g-dev libbz2-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install zlib bzip2

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          vcpkg install zlib:x64-windows
          vcpkg install bzip2:x64-windows
          vcpkg integrate install

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Set execute permissions on test scripts
        if: runner.os != 'Windows'
        run: |
          chmod +x tests/*.sh
          chmod +x tests/*.pl

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ runner.os == 'Windows' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake' || '' }}
          ${{ runner.os == 'macOS' && '-DCMAKE_OSX_ARCHITECTURES=x86_64' || '' }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        continue-on-error: true
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose

      - name: Package Artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        shell: bash
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a artifact-${{ runner.os }}.zip .
          else
            tar -czf artifact-${{ runner.os }}.tar.gz *
          fi

      - name: Upload Artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: ${{ steps.strings.outputs.build-output-dir }}/artifact-${{ runner.os }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
          retention-days: 5
          compression-level: 6
          if-no-files-found: error

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-build'
          merge-multiple: true
          path: artifacts

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            
            const files = await fs.readdir('./artifacts');
            for (const file of files) {
              const contentLength = (await fs.stat(`./artifacts/${file}`)).size;
            
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: '${{ steps.create_release.outputs.id }}',
                name: file,
                data: await fs.readFile(`./artifacts/${file}`),
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': contentLength
                }
              });
            }